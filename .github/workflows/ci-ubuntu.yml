name: Build ffead-cpp on ubuntu with select, poll, epoll and io_uring

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-20.04
    if: "!contains(github.event.head_commit.message, '[skip_build]')"
    steps:
    - uses: actions/checkout@v2
    - name: Install dependencies
      run: |
        sudo apt update -yqq && sudo apt install --no-install-recommends -yqq ninja-build libpq-dev libcurl4-openssl-dev autoconf-archive unzip uuid-dev odbc-postgresql unixodbc unixodbc-dev apache2 apache2-dev libapr1-dev libaprutil1-dev memcached libmemcached-dev redis-server libssl-dev zlib1g-dev cmake make clang-format-9 ninja-build libjsoncpp-dev libboost-all-dev
        sudo apt remove -y libsqlite3-dev
        sudo apt-get install libseccomp-dev
        git clone https://github.com/opencontainers/runc
        cd runc
        make
        sudo make install
        pushd /tmp
        wget -q https://github.com/efficient/libcuckoo/archive/master.zip
        unzip master.zip
        rm -f master.zip
        cd libcuckoo-master
        cmake -DCMAKE_INSTALL_PREFIX=/usr . && sudo make install
        cd /tmp
        rm -rf libcuckoo-master
        wget -q https://github.com/mongodb/mongo-c-driver/releases/download/1.4.2/mongo-c-driver-1.4.2.tar.gz
        tar xf mongo-c-driver-1.4.2.tar.gz
        rm -f mongo-c-driver-1.4.2.tar.gz
        cd mongo-c-driver-1.4.2/ && ./configure --disable-automatic-init-and-cleanup && make && sudo make install
        cd /tmp
        rm -rf mongo-c-driver-1.4.2
        wget -q https://github.com/redis/hiredis/archive/v1.0.0.tar.gz
        tar xf v1.0.0.tar.gz
        rm -f v1.0.0.tar.gz
        cd hiredis-1.0.0/
        cmake . && sudo make install
        cd /tmp
        rm -rf hiredis-1.0.0
        git clone https://github.com/sumeetchhetri/cinatra.git
        cd cinatra
        git checkout sum_master
        cd /tmp
        git clone --recurse-submodules https://github.com/sumeetchhetri/drogon
        cd  drogon
        mkdir build
        cd build
        cmake -DCMAKE_BUILD_TYPE=Release ..
        make && sudo make install
        cd /tmp
        rm -rf drogon
        #cd /tmp
        #wget -q https://github.com/nghttp2/nghttp2/releases/download/v1.41.0/nghttp2-1.41.0.tar.gz
        #tar xvf nghttp2-1.41.0.tar.gz
        #cd nghttp2-1.41.0
        #cmake -DENABLE_ASIO_LIB=on -GNinja .
        #sudo ninja install
        #cd /tmp
        #rm -rf nghttp2-1.41.0
        popd

    - name: Install ffead-cpp
      run: |
        #sudo su
        #sed -i 's|1.13.1|1.19.1|g' modules/nginx_mod_ffeadcpp/CMakeLists.txt
        #Shared library version.....
        mkdir build && cd build
        cmake -GNinja -DSRV_EMB=on -DMOD_APACHE=on -DMOD_NGINX=on -DMOD_MEMCACHED=on -DMOD_REDIS=on -DMOD_SDORM_MONGO=on ..
        sudo ninja install
        cd ../ffead-cpp-6.0-bin
        sudo chmod 755 *.sh resources/*.sh rtdcf/autotools/*.sh
        #sudo sed -i'' -e "s|<init>TeBkUmRouter.updateCache</init>||g" web/te-benchmark-um/config/cache.xml
        #sudo sed -i'' -e "s|<init>TeBkRestController.updateCache</init>||g" web/te-benchmark/config/cache.xml
        sudo ./server.sh &
        COUNTER=0
        while [ ! -f lib/libinter.so ]
        do
          sleep 1
          COUNTER=$((COUNTER+1))
          if [ "$COUNTER" = 240 ]
          then
            echo "ffead-cpp exiting due to failure...."
            exit 1
          fi
        done
        COUNTER=0
        while [ ! -f lib/libdinter.so ]
        do
          sleep 1
          COUNTER=$((COUNTER+1))
          if [ "$COUNTER" = 240 ]
          then
            echo "ffead-cpp exiting due to failure....dlib"
            exit 1
          fi
        done
        echo "ffead-cpp start successful"
        #sleep 5
        cd tests && sudo chmod +x *.sh tests && sudo ./runTests.sh
        echo "ffead-cpp normal shutdown"
        sudo pkill ffead-cpp
        #Static library version.....
        #cd ../.. && sudo rm -rf build ffead-cpp-6.0-bin
        #mkdir build && cd build
        #cmake -GNinja -DBUILD_SHARED_LIBS=off -DSRV_EMB=on -DMOD_APACHE=on -DMOD_NGINX=on -DMOD_MEMCACHED=on -DMOD_REDIS=on -DMOD_SDORM_MONGO=on ..
        #sudo ninja install
        #cd ../ffead-cpp-6.0-bin
        #sudo chmod 755 *.sh resources/*.sh rtdcf/autotools/*.sh
        #sudo sed -i'' -e "s|<init>TeBkUmRouter.updateCache</init>||g" web/te-benchmark-um/config/cache.xml
        #sudo sed -i'' -e "s|<init>TeBkRestController.updateCache</init>||g" web/te-benchmark/config/cache.xml
        #sudo ./server.sh &
        #COUNTER=0
        #while [ ! -f lib/libinter.so ]
        #do
        #  sleep 1
        #  COUNTER=$((COUNTER+1))
        #  if [ "$COUNTER" = 240 ]
        #  then
        #    echo "exiting...."
        #    exit 1
        #  fi
        #done
        #COUNTER=0
        #while [ ! -f lib/libdinter.so ]
        #do
        #  sleep 1
        #  COUNTER=$((COUNTER+1))
        #  if [ "$COUNTER" = 240 ]
        #  then
        #    echo "exiting....dlib"
        #    exit 1
        #  fi
        #done
        #echo "ffead-cpp start successful"
        #sleep 5
        #cd tests && sudo chmod +x *.sh tests && sudo ./runTests.sh
        #echo "ffead-cpp normal shutdown"
        #sudo pkill ffead-cpp
        #With Select event engine .....
        cd ../.. && sudo rm -rf build ffead-cpp-6.0-bin
        mkdir build && cd build
        cmake -GNinja -DSRV_EMB=on -DMOD_MEMCACHED=on -DMOD_REDIS=on -DMOD_SDORM_MONGO=on -DWITH_SELECT=on ..
        ninja install
        #With Poll event engine .....
        cd .. && sudo rm -rf build ffead-cpp-6.0-bin
        mkdir build && cd build
        cmake -GNinja -DSRV_EMB=on -DMOD_MEMCACHED=on -DMOD_REDIS=on -DMOD_SDORM_MONGO=on -DWITH_POLL=on ..
        ninja install
        cd .. && sudo rm -rf build ffead-cpp-6.0-bin
        #With ubuntu 20.04, upgrade kernel to 5.7 and then install liburing, with io_uring event engine
        #cd /tmp/ 
        #apt install -y kmod linux-base
        #wget -c https://kernel.ubuntu.com/~kernel-ppa/mainline/v5.7/amd64/linux-headers-5.7.0-050700_5.7.0-050700.202006082127_all.deb
        #wget -c https://kernel.ubuntu.com/~kernel-ppa/mainline/v5.7/amd64/linux-headers-5.7.0-050700-generic_5.7.0-050700.202006082127_amd64.deb
        #wget -c https://kernel.ubuntu.com/~kernel-ppa/mainline/v5.7/amd64/linux-image-unsigned-5.7.0-050700-generic_5.7.0-050700.202006082127_amd64.deb
        #wget -c https://kernel.ubuntu.com/~kernel-ppa/mainline/v5.7/amd64/linux-modules-5.7.0-050700-generic_5.7.0-050700.202006082127_amd64.deb
        #sudo dpkg -i *.deb
        #uname -a
        #wget -q https://github.com/axboe/liburing/archive/liburing-0.7.tar.gz
        #tar xf liburing-0.7.tar.gz
        #rm -f liburing-0.7.tar.gz
        #cd liburing-liburing-0.7 && ./configure --prefix=/usr/local && make install
        #cd /tmp && rm -rf liburing-liburing-0.7
        #cd -
        #cd .. && sudo rm -rf build ffead-cpp-6.0-bin
        #mkdir build && cd build
        #cmake -GNinja -DSRV_EMB=on -DMOD_MEMCACHED=on -DMOD_REDIS=on -DMOD_SDORM_MONGO=on -DWITH_IOURING=on ..
        #ninja install

    - name: Build ffead-cpp within docker
      run: |
        cd docker/os-based
        docker build -f DockerFile-Ubuntu-x64-ffead-cpp .
        docker build -f DockerFile-Ubuntu-x64-ffead-cpp_autoconf .
        
